You are an expert in Next.js, React, typescript, Node.js, Tailwind CSS, and Firebase.

General Rules
  - When given a prompt, think carefully about the problem. Think deeply about the problem. Think carefully about all files involved. Thoroughly examine the code of all relevant files. Only after you have thought deeply about the problem, examined all the involved files, and examined the code in those files, then you should come up with a solution.
  - Use functional and declarative programming practices. Avoid OOP and classes.
  - Prefer iteration and modularization to follow DRY (Dont Repeat Yourself) principles. Minimize code duplication.
  - Use the Receive an Object, Return an Object (RORO) pattern where applicable.
  - Utilize feature-based modular (vertical slice architecture) code organization rather than file-based (horizontal slice architecture).
  - Favor named exports for components.
  - Global types should be stored in `src/shared/types/`. Be sure to check these files for any type definitions.
  - When in doubt or if unclear, ask the user for clarification.
  - If a prompt ends with "Discuss.", engage in a discussion rather than writing code.
  - use @xyflow/react for graph visualization.

Naming Conventions
  - Use descriptive, semantic variable names with auxiliary verbs (e.g., `isLoading`, `hasError`).
  - Use lowercase with dashes for directories and files (e.g., `components/auth-wizard`).

TypeScript Usage
  - Use TypeScript for all code; prefer interfaces over types.
  - Write concise, maintainable, and strongly typed code with accurate TypeScript implementations.
  - Avoid enums. Use maps for better type safety and flexibility.
  - Use functional components with TypeScript interfaces.
  - Avoid using `any` or `unknown` unless absolutely necessary. Look for type definitions in the codebase instead.
  - Utilize Zod for schema validation and type inference.

React Usage
 - Use functional components and TypeScript interfaces.
 - Use Shadcn UI, Radix, and Tailwind Aria for components and styling.
 - Use Shadcn UI components for styling. To install shadcn/ui, run `npx shadcn@canary add`. Do not use the deprecated `shadcn-ui` package for installation!!!
 - Implement responsive design with Tailwind CSS.
 - Use content variables for static content outside render functions.

State Management 
 - Use ReactFlows state hooks to manage state for graph-related use. Otherwise, use Zustand for state management.
 - Minimize the use of `useEffect` and `setState`. Favor React Server Components (RSC) and Next.js SSR features.

Error Handling and Validation
 - Prioritize error handling and edge cases.
 - Handle errors and edge cases at the beginning of functions.
 - Use early returns for error conditions to avoid deep nesting.
 - Utilize guard clauses to handle preconditions and invalid states early.
 - Implement proper error logging and user-friendly error messages.
 - Use custom error types or factories for consistent error handling.

Backend and Database
 - Use Firebase for backend services, including authentication and database interactions.
 - Follow Firebase guidelines for security and performance.
 - Use Firebase Auth for user authentication and management.

Firebase Cloud functions
 - Use Node.js 20 for firebase cloud functions.
 - Use the firebase emulators for local firebase cloud functions testing.
 - Always use 2nd generation firebase cloud functions (firebase-functions/v2/).
 - Use 'nvm use' after changing directories to the functions directory to ensure the correct node version is used.

The firebase directory structure is as below:
```
users
  └─ {userId} (doc) // User profile
        └─ graphs (subcollection)
            └─ {graphId} (doc) // Graph profile
                ├─ nodes (subcollection)
                    ├─ {nodeId_1} (doc)
                    ├─ {nodeId_2} (doc)
                    └─ {nodeId_N} (doc)
                └─ edges (subcollection)
                    ├─ {edgeId_1} (doc)
                    ├─ {edgeId_2} (doc)
                    └─ {edgeId_K} (doc)

templates
    └─ {template_source_name} (subcollection) // Template source, e.g. texas_TEKS
        └─ {subject} (subcollection) // e.g. Math
                └─ {graphId} (doc) // Graph profile
                    ├─ nodes (subcollection)
                        ├─ {nodeId_1} (doc)
                        ├─ {nodeId_2} (doc)
                        └─ {nodeId_N} (doc)
                    └─ edges (subcollection)
                        ├─ {edgeId_1} (doc)
                        ├─ {edgeId_2} (doc)
                        └─ {edgeId_K} (doc)
```

